{"version":3,"sources":["components/VehiclesContainer/VehiclesContainer.tsx","components/Filter/Filter.tsx","components/Unit/Unit.tsx","components/Vehicle/Vehicle.tsx","components/Vehicles/Cell/SortIcon/SortIcon.tsx","components/Vehicles/Cell/Cell.tsx","components/Vehicles/Vehicles.tsx","utils/calculateDistance.tsx","utils/calculateLineData.tsx","utils/sortVehicleProps.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["UnitType","Filter","filter","className","data-testid","onChange","e","target","value","type","selectedClass","expected","actual","Unit","setUnitType","unitType","MPH","onClick","KMH","distanceFormat","Intl","NumberFormat","maximumFractionDigits","speedFormat","Vehicle","distance","make","model","topSpeed","year","format","SortIcon","asc","Cell","children","field","isCenter","isLarge","sort","sortByField","Vehicles","props","calculateDistance","now","speed","then","Date","getTime","calculatePoints","entries","lastYear","reduce","p","c","nowYear","getFullYear","points","a","b","map","deltas","range","i","push","calculateLineData","data","forEach","point","entry","key","Object","keys","name","sortVehicleProps","array","aField","bField","flip","toLowerCase","VehiclesContainer","useState","undefined","pickedDate","setPickedDate","date","setDate","useEffect","interval","setInterval","clearInterval","JSON","parse","stringify","initial","setFilter","lower","includes","chartData","chartWidth","length","setSort","calendarIcon","Array","isArray","height","legend","round","thousands","width","prop","App","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yhEAkBYA,E,yECKGC,G,YATgC,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAC7C,yBAAKC,UAAU,sBACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBAAhB,WAEF,2BAAOA,UAAU,eAAeC,cAAY,SAASC,SAAU,SAACC,GAAD,OAAOJ,EAAOI,EAAEC,OAAOC,QAAQC,KAAK,cCVjGC,EAAgB,SAACC,EAAoBC,GACzC,OAAID,IAAaC,EACR,cAGF,iBAUMC,EAP4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,SAAhB,OACzC,yBAAKZ,UAAU,aACb,4BAAQA,UAAW,OAASO,EAAcV,EAASgB,IAAKD,GAAWE,QAAS,kBAAMH,EAAYd,EAASgB,MAAMP,KAAK,UAAlH,OACA,4BAAQN,UAAW,OAASO,EAAcV,EAASkB,IAAKH,GAAWE,QAAS,kBAAMH,EAAYd,EAASkB,MAAMT,KAAK,UAAlH,UCFEU,G,MAAiB,IAAIC,KAAKC,aAAa,QAAS,CACpDC,sBAAuB,KAMnBC,EAAc,IAAIH,KAAKC,aAAa,QAAS,CACjDC,sBAAuB,IAgBVE,EAVkC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,SAAUC,EAApC,EAAoCA,KAApC,OAC/C,wBAAI1B,UAAU,WACZ,4BAAK0B,GACL,wBAAI1B,UAAU,qBAAqBuB,GACnC,4BAAKC,GACL,wBAAIxB,UAAU,qBAAqBoB,EAAYO,OAAOF,IACtD,4BAAKT,EAAeW,OAAOL,M,QCpBhBM,G,MAJoC,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OACjD,0BAAM7B,UAAU,YAAY6B,EAAM,SAAM,YC6B3BC,EAvB4B,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAClFpC,EAAY,GAchB,OAZIkC,IACFlC,GAAa,qBAGXiC,IACEjC,IACFA,GAAa,KAGfA,GAAa,eAIb,wBAAIA,UAAWA,EAAWc,QAAS,kBAAMsB,EAAYJ,KAClDD,EACCC,IAAUG,EAAKH,OAAU,kBAAC,EAAD,CAAUH,IAAKM,EAAKN,QCFtCQ,G,MAjBoC,SAAC,GAAD,IAAGN,EAAH,EAAGA,SAAaO,EAAhB,mCACjD,2BAAOtC,UAAU,gCACf,+BACE,4BACE,kBAAC,EAAD,eAAMgC,MAAM,QAAWM,GAAvB,QACA,kBAAC,EAAD,eAAMN,MAAM,OAAOE,SAAO,GAAKI,GAA/B,QACA,kBAAC,EAAD,eAAMN,MAAM,SAAYM,GAAxB,SACA,kBAAC,EAAD,eAAMN,MAAM,WAAWC,UAAQ,EAACC,SAAO,GAAKI,GAA5C,aACA,kBAAC,EAAD,eAAMN,MAAM,WAAWC,UAAQ,GAAKK,GAApC,cAGJ,+BACGP,MCdQQ,EAPW,SAACC,EAAWd,EAAcD,GAClD,IAAMgB,EAAQhB,EAAW,GAAK,GAAK,IAC7BiB,EAAO,IAAIC,KAAKjB,EAAM,EAAG,EAAG,EAAG,EAAG,EAAG,GAE3C,OAAQc,EAAII,UAAYF,EAAKE,WAAaH,GCsBtCI,EAAkB,SAACC,EAAkBN,GACzC,IAAMO,EAAWD,EACdE,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAEvB,KAAOwB,EAAExB,KAAOuB,EAAIC,KACvCxB,KACGyB,EAAUX,EAAIY,cACdC,EAAiBP,EACpBX,MAAK,SAACmB,EAAGC,GAAJ,OAAUD,EAAE5B,KAAO6B,EAAE7B,QAC1B8B,KAAI,gBAAG9B,EAAH,EAAGA,KAAH,OAAc,IAAIiB,KAAKjB,EAAM,EAAG,EAAG,EAAG,EAAG,EAAG,MAE/C+B,EAAS,EACTC,EAAQ,GAEPD,GAAUN,EAAUJ,GAAY,KAAO,EAC1CW,EAAQ,KACED,GAAUN,EAAUJ,GAAY,IAAM,EAChDW,EAAQ,GAERD,EAAS,EAGX,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAQE,IAC1BN,EAAOO,KAAK,IAAIjB,KAAKI,EAAYY,EAAID,EAAQ,EAAG,EAAG,EAAG,EAAG,EAAG,IAK9D,OAFAL,EAAOO,KAAKpB,GAELa,GAGMQ,EAtDW,SAACf,EAAkBN,GAC3C,IAAMsB,EAAqB,GAkB3B,OAjBuBjB,EAAgBC,EAASN,GAEzCuB,SAAQ,SAAAC,GACblB,EAAQiB,SAAQ,SAAAE,GACd,IAAMC,EAAMD,EAAMvC,KAAO,IAAMuC,EAAM1C,KAAO,IAAM0C,EAAMzC,MAClDE,EAAOsC,EAAMZ,cAEf1B,GAAQuC,EAAMvC,OACS,qBAAdoC,EAAKI,KACdJ,EAAKI,GAAO,IAGdJ,EAAKI,GAAKxC,GAAQa,EAAkByB,EAAOC,EAAMvC,KAAMuC,EAAMxC,iBAK5D0C,OAAOC,KAAKN,GAAMN,KAAI,SAAAU,GAAG,MAAK,CACnCJ,KAAMA,EAAKI,GACXG,KAAMH,O,QCPKI,EAxBU,SAACC,EAAiBvC,EAAeH,GACxD,OAAO0C,EAAMpC,MAAK,SAACmB,EAAQC,GACzB,IAAIiB,EAASlB,EAAEtB,GACXyC,EAASlB,EAAEvB,GACX0C,EAAO7C,EAAM,GAAK,EAUtB,MARsB,kBAAX2C,IACTA,EAASA,EAAOG,eAGI,kBAAXF,IACTA,EAASA,EAAOE,eAGdH,EAASC,EACJ,EAAIC,EACFF,EAASC,GACV,EAAIC,EAGP,M,gBTJC7E,O,aAAAA,I,cAAAA,M,KAuBZ,IA2He+E,EA3H8B,WAAM,MAGbC,wBAA2BC,GAHd,mBAG1CC,EAH0C,KAG9BC,EAH8B,OAMzBH,mBAAS,IAAIlC,MANY,mBAM1CsC,EAN0C,KAMpCC,EANoC,KAQjDC,qBAAU,WACR,IAAKJ,EAAY,CACf,IAAMK,EAAWC,aACf,kBAAMH,EAAQ,IAAIvC,QAClB,KAGF,OAAO,kBAAM2C,cAAcF,QAK/B,IAAItC,EAAmByC,KAAKC,MAAMD,KAAKE,UAAUC,IApBA,EAuBvBb,mBAAS,IAvBc,mBAuB5C9E,EAvB4C,KAuBpC4F,EAvBoC,KAyB7C5F,IACF+C,EAAUA,EAAQ/C,QAAO,SAAAkE,GACvB,IAAM2B,EAAQ7F,EAAO4E,cAErB,OAAOV,EAAM1C,KAAKoD,cAAckB,SAASD,IACpC3B,EAAMzC,MAAMmD,cAAckB,SAASD,OA9BK,MAmCnBf,mBAAShF,EAASgB,KAnCC,mBAmC5CD,EAnC4C,KAmClCD,EAnCkC,KAsC7C2B,EAAwBQ,EAAQU,KAAI,SAAAS,GACtC,IAAIxC,EAAWwC,EAAMxC,SAMrB,OAJIb,IAAaf,EAASkB,MACxBU,GAAY,UAGP,eACFwC,EADL,CAEE3C,SAAUiB,EAAkBwC,GAAcE,EAAMhB,EAAMvC,KAAMD,GAC5DyC,IAAKD,EAAM1C,KAAO,IAAM0C,EAAMzC,MAC9BC,gBAKEqE,EAAYjC,EAAkBvB,EAAOyC,GAAcE,GACrDc,EAAa,IAAO,GAAKD,EAC1BtC,KAAI,SAAAM,GAAI,OAAIK,OAAOC,KAAKN,EAAKA,MAAMkC,UACnChD,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,EAAID,EAAIC,KAzDiB,EA4D3B2B,mBAAS,CAC7BhD,KAAK,EACLG,MAAO,aA9DwC,mBA4D5CG,EA5D4C,KA4DtC8D,EA5DsC,KAiEjD3D,EAAQgC,EAAiBhC,EAAOH,EAAKH,MAAOG,EAAKN,KAmBjD,OACE,oCACE,yBAAK7B,UAAU,gBACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAQD,OAAQ4F,KAElB,yBAAK3F,UAAU,eACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,oBAAf,iBAEF,kBAAC,IAAD,CACEkG,aAAc,KACdlG,UAAU,eACV2B,OAAO,UACPzB,SAAU,SAAC+E,GAAD,OAAUD,EAAcmB,MAAMC,QAAQnB,GAAQA,EAAK,GAAKA,IAClE5E,MAAO0E,MAGb,yBAAK/E,UAAU,eACb,kBAAC,EAAD,CAAMW,YAAaA,EAAaC,SAAUA,MAG9C,yBAAKZ,UAAU,SACb,kBAAC,IAAD,CACE8D,KAAMgC,EACNO,OAAO,QACPC,QAAQ,EACRC,MAAO,EACPC,UAAU,IACVC,MAAOV,EAAa,QAExB,kBAAC,EAAD,CAAU5D,KAAMA,EAAMC,YA9CN,SAACJ,GACfG,EAAKH,QAAUA,EACjBiE,EAAQ,eACH9D,EADE,CAELN,KAAMM,EAAKN,OAGboE,EAAQ,CACNpE,KAAK,EACLG,YAsCCM,EAAMkB,KAAI,SAAAkD,GAAI,OAAI,kBAAC,EAAYA,SU7IzBC,EAbgB,kBAC7B,yBAAK3G,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,2CACA,0DAA+B,uBAAG4G,KAAK,oGAAR,oBAA/B,QAAmK,uBAAGA,KAAK,4GAAR,WAAnK,KACA,4CACA,kBAAC,EAAD,UCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9E,MAAK,SAAA+E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1afa1f51.chunk.js","sourcesContent":["import React, { FunctionComponent, useState, useEffect } from 'react';\nimport DatePicker from 'react-date-picker';\n/// <reference path=\"react-chartkick.d.ts\" />\nimport { LineChart } from 'react-chartkick';\nimport 'chart.js';\n\nimport Filter from '../Filter';\nimport Unit from '../Unit/Unit';\nimport Vehicle, { VehicleProps } from '../Vehicle';\nimport Vehicles from '../Vehicles';\n\nimport calculateDistance from '../../utils/calculateDistance';\nimport calculateLineData from '../../utils/calculateLineData';\nimport initial from '../../config/vehicles.json';\nimport sortVehicleProps from '../../utils/sortVehicleProps';\n\nimport './VehiclesContainer.css';\n\nexport enum UnitType {\n  KMH,\n  MPH\n}\n\n/**\n * The list of vehicle entries from the JSON.\n */\nexport type Entries = Entry[];\n\n/**\n * The vehicle entry from the JSON data.\n */\ntype Entry = {\n  make: string,\n  model: string,\n  topSpeed: number,\n  year: number\n};\n\n/**\n * Renders a filterable and sortable table with data updated on an interval.\n */\nconst VehiclesContainer: FunctionComponent = () => {\n\n  // Override auto updater with selected date.\n  const [pickedDate, setPickedDate] = useState<Date | undefined>(undefined);\n\n  // Recalculate the distance on a regular interval.\n  const [date, setDate] = useState(new Date());\n\n  useEffect(() => {\n    if (!pickedDate) {\n      const interval = setInterval(\n        () => setDate(new Date()),\n        2000\n      );\n\n      return () => clearInterval(interval);\n    }\n  });\n\n  // The initial list of vehicle entries.\n  let entries: Entry[] = JSON.parse(JSON.stringify(initial));\n\n  // Filter the list of entries.\n  let [filter, setFilter] = useState('');\n\n  if (filter) {\n    entries = entries.filter(entry => {\n      const lower = filter.toLowerCase();\n\n      return entry.make.toLowerCase().includes(lower) \n        || entry.model.toLowerCase().includes(lower);\n    });\n  }\n\n  // Convert unit type.\n  let [unitType, setUnitType] = useState(UnitType.MPH);\n\n  // Convert the entries to props.\n  let props: VehicleProps[] = entries.map(entry => {\n    let topSpeed = entry.topSpeed;\n\n    if (unitType === UnitType.KMH) {\n      topSpeed *= 1.609344;\n    }\n\n    return {\n      ...entry,\n      distance: calculateDistance(pickedDate || date, entry.year, topSpeed),\n      key: entry.make + ' ' + entry.model,\n      topSpeed\n    };\n  });\n\n  // Generate line chart data.\n  const chartData = calculateLineData(props, pickedDate || date);\n  let chartWidth = 100 + (50 * chartData\n    .map(data => Object.keys(data.data).length)\n    .reduce((p, c) => p > c ? p : c));\n\n  // Sort the list of entries.\n  let [sort, setSort] = useState({\n    asc: false,\n    field: 'distance'\n  });\n\n  props = sortVehicleProps(props, sort.field, sort.asc);\n\n  /**\n   * Sorts the vehicles by the select column (ascending, then descending).\n   */\n  const sortByField = (field: string) => {\n    if (sort.field === field) {\n      setSort({\n        ...sort,\n        asc: !sort.asc\n      });\n    } else {\n      setSort({\n        asc: true,\n        field\n      });\n    }\n  };\n\n  return (\n    <>\n      <div className=\"row controls\">\n        <div className=\"col\">\n          <Filter filter={setFilter}/>\n        </div>\n        <div className=\"col-md-auto\">\n          <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n              <div className=\"input-group-text\">📅</div>\n            </div>\n            <DatePicker \n              calendarIcon={null}\n              className=\"form-control\"\n              format=\"y-MM-dd\"\n              onChange={(date) => setPickedDate(Array.isArray(date) ? date[0] : date)} \n              value={pickedDate}/>\n          </div>\n        </div>\n        <div className=\"col-md-auto\">\n          <Unit setUnitType={setUnitType} unitType={unitType}/>\n        </div>\n      </div>\n      <div className=\"chart\">\n        <LineChart \n          data={chartData} \n          height=\"600px\" \n          legend={false} \n          round={2} \n          thousands=\",\"\n          width={chartWidth + \"px\"}/>\n      </div>\n      <Vehicles sort={sort} sortByField={sortByField}>\n        {props.map(prop => <Vehicle {...prop}/>)}\n      </Vehicles>\n    </>\n  );\n};\n\nexport default VehiclesContainer;","import React, { FunctionComponent } from 'react';\n\nimport './Filter.css';\n\n/**\n * The properties for the Filter component.\n */\ntype FilterProps = {\n  filter: Function\n};\n\n/**\n * Renders an input field for filtering the vehicles list.\n */\nconst Filter: FunctionComponent<FilterProps> = ({ filter }) => (\n  <div className=\"input-group filter\">\n    <div className=\"input-group-prepend\">\n      <span className=\"input-group-text\">Filter</span>\n    </div>\n    <input className=\"form-control\" data-testid=\"filter\" onChange={(e) => filter(e.target.value)} type=\"search\"/>\n  </div>\n);\n\nexport default Filter;\n","import React, { FunctionComponent } from 'react';\n\nimport { UnitType } from '../VehiclesContainer';\n\ntype UnitProps = {\n  setUnitType: Function,\n  unitType: UnitType\n};\n\nconst selectedClass = (expected: UnitType, actual: UnitType) => {\n  if (expected === actual) {\n    return \"btn-primary\";\n  }\n\n  return \"btn-secondary\";\n};\n\nconst Unit: FunctionComponent<UnitProps> = ({ setUnitType, unitType }) => (\n  <div className=\"btn-group\">\n    <button className={\"btn \" + selectedClass(UnitType.MPH, unitType)} onClick={() => setUnitType(UnitType.MPH)} type=\"button\">mph</button>\n    <button className={\"btn \" + selectedClass(UnitType.KMH, unitType)} onClick={() => setUnitType(UnitType.KMH)} type=\"button\">km/h</button>\n  </div>\n);\n\nexport default Unit;\n","import React, { FunctionComponent } from 'react';\n\nimport './Vehicle.css';\n\n/**\n * The properties of the Vehicle component.\n */\nexport type VehicleProps = {\n  distance: number,\n  make: string,\n  model: string,\n  topSpeed: number,\n  year: number\n};\n\n/**\n * The number formatter for distance.\n */\nconst distanceFormat = new Intl.NumberFormat('en-US', {\n  maximumFractionDigits: 2\n});\n\n/**\n * The number formatter for speed.\n */\nconst speedFormat = new Intl.NumberFormat('en-US', {\n  maximumFractionDigits: 1\n});\n\n/**\n * Renders an individual vehicle for the table of vehicles.\n */\nconst Vehicle: FunctionComponent<VehicleProps> = ({ distance, make, model, topSpeed, year }) => (\n  <tr className=\"vehicle\">\n    <td>{year}</td>\n    <td className=\"d-none d-md-block\">{make}</td>\n    <td>{model}</td>\n    <td className=\"d-none d-md-block\">{speedFormat.format(topSpeed)}</td>\n    <td>{distanceFormat.format(distance)}</td>\n  </tr>\n);\n\nexport default Vehicle;","import React, { FunctionComponent } from 'react';\n\nimport './SortIcon.css';\n\n/**\n * The properties of the SortIcon component.\n */\ntype SortIconProps = {\n  asc: boolean\n};\n\n/**\n * Renders a sorting icon.\n */\nconst SortIcon: FunctionComponent<SortIconProps> = ({ asc }) => (\n  <span className=\"sortIcon\">{asc ? \"↓\" : \"↑\"}</span>\n);\n\nexport default SortIcon;\n","import React, { FunctionComponent } from 'react';\n\nimport SortIcon from './SortIcon';\n\n/**\n * The properties of the Cell component.\n */\ntype CellProps = {\n  field: string,\n  isCenter?: boolean,\n  isLarge?: boolean,\n  sort: {\n    asc: boolean,\n    field: string\n  },\n  sortByField: Function\n};\n\n/**\n * Renders an individual cell representing a column heading.\n */\nconst Cell: FunctionComponent<CellProps> = ({ children, field, isCenter, isLarge, sort, sortByField }) => {\n  let className = '';\n\n  if (isLarge) {\n    className += 'd-none d-md-block';\n  }\n\n  if (isCenter) {\n    if (className) {\n      className += ' ';\n    }\n\n    className += 'text-center';\n  }\n\n  return (\n    <th className={className} onClick={() => sortByField(field)}>\n      {children}\n      {(field === sort.field) && <SortIcon asc={sort.asc}/>}\n    </th>\n  );\n};\n\nexport default Cell;\n","import React, { FunctionComponent } from 'react';\n\nimport Cell from './Cell';\n\nimport './Vehicles.css';\n\n/**\n * The properties of the Vehicles component.\n */\ntype VehiclesProps = {\n  sort: {\n    asc: boolean,\n    field: string\n  },\n  sortByField: Function\n};\n\n/**\n * Renders the table containing the individual Vehicle renderings.\n */\nconst Vehicles: FunctionComponent<VehiclesProps> = ({ children, ...props }) => (\n  <table className=\"table table-striped vehicles\">\n    <thead>\n      <tr>\n        <Cell field=\"year\" {...props}>Year</Cell>\n        <Cell field=\"make\" isLarge {...props}>Make</Cell>\n        <Cell field=\"model\" {...props}>Model</Cell>\n        <Cell field=\"topSpeed\" isCenter isLarge {...props}>Top Speed</Cell>\n        <Cell field=\"distance\" isCenter {...props}>Distance</Cell>\n      </tr>\n    </thead>\n    <tbody>\n      {children}\n    </tbody>\n  </table>\n);\n\nexport default Vehicles;","/**\n * Calculates the distance travel by a vehicle at its top speed.\n *\n * The first month and day of the given year is used in the calculation. The top speed can be of\n * any unit (miles or kilometers) but it must always be by hour (e.g. 100 mph, 100 km/h). The top\n * speed will always be divided by minutes, seconds, then milliseconds.\n *\n * @param now      The current date and time.\n * @param year     The year the vehicle started traveling.\n * @param topSpeed The top speed of the vehicle.\n */\nconst calculateDistance = (now: Date, year: number, topSpeed: number) => {\n  const speed = topSpeed / 60 / 60 / 1000;\n  const then = new Date(year, 0, 1, 0, 0, 0, 0);\n\n  return (now.getTime() - then.getTime()) * speed;\n};\n\nexport default calculateDistance;","/// <reference path=\"../types/react-chartkick.d.ts\" />\nimport { DataType } from 'react-chartkick';\n\nimport { Entries } from '../components/VehiclesContainer';\nimport calculateDistance from './calculateDistance';\n\ntype MappedPoints = {\n  [key: string]: {\n    [key: string]: number\n  }\n};\n\nconst calculateLineData = (entries: Entries, now: Date) => {\n  const data: MappedPoints = {};\n  const points: Date[] = calculatePoints(entries, now);\n\n  points.forEach(point => {\n    entries.forEach(entry => {\n      const key = entry.year + ' ' + entry.make + ' ' + entry.model;\n      const year = point.getFullYear();\n\n      if (year >= entry.year) {\n        if (typeof data[key] === 'undefined') {\n          data[key] = {};\n        }\n\n        data[key][year] = calculateDistance(point, entry.year, entry.topSpeed);\n      }\n    });\n  });\n\n  return Object.keys(data).map(key => ({\n    data: data[key],\n    name: key\n  })) as DataType[];\n};\n\nconst calculatePoints = (entries: Entries, now: Date) => {\n  const lastYear = entries\n    .reduce((p, c) => p.year > c.year ? p : c)\n    .year;\n  const nowYear = now.getFullYear();\n  const points: Date[] = entries\n    .sort((a, b) => a.year - b.year)\n    .map(({ year }) => new Date(year, 0, 1, 0, 0, 0, 0));\n\n  let deltas = 0;\n  let range = 0;\n\n  if ((deltas = (nowYear - lastYear) / 100) > 1) {\n    range = 100;\n  } else if ((deltas = (nowYear - lastYear) / 10) > 1) {\n    range = 10;\n  } else {\n    deltas = 0;\n  }\n\n  for (let i = 0; i < deltas; i++) {\n    points.push(new Date(lastYear + (i * range), 0, 1, 0, 0, 0, 0));\n  }\n\n  points.push(now);\n\n  return points;\n};\n\nexport default calculateLineData;\n","import { VehicleProps } from \"../components/Vehicle/Vehicle\";\n\nconst sortVehicleProps = (array: object[], field: string, asc: boolean) : VehicleProps[] => {\n  return array.sort((a: any, b: any) => {\n    let aField = a[field];\n    let bField = b[field];\n    let flip = asc ? 1 : -1;\n\n    if (typeof aField === \"string\") {\n      aField = aField.toLowerCase();\n    }\n\n    if (typeof bField === \"string\") {\n      bField = bField.toLowerCase();\n    }\n\n    if (aField > bField) {\n      return 1 * flip;\n    } else if (aField < bField) {\n      return -1 * flip;\n    }\n\n    return 0;\n  }) as VehicleProps[];\n};\n\nexport default sortVehicleProps;","import React, { FunctionComponent } from 'react';\n\nimport VehiclesContainer from '../VehiclesContainer';\n\nconst App: FunctionComponent = () => (\n  <div className=\"container\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <h1>Reddit Post</h1>\n        <p>This page is in response to <a href=\"https://www.reddit.com/r/cars/comments/fbl31h/if_the_fastest_vehicle_produced_each_year_was_put/\">this Reddit post</a> and <a href=\"https://www.reddit.com/r/cars/comments/fbl31h/if_the_fastest_vehicle_produced_each_year_was_put/fj4ynns/\">comment</a>.</p>\n        <h1>The Leg Work</h1>\n        <VehiclesContainer/>\n      </div>\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}